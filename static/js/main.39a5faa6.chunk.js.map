{"version":3,"sources":["components/utils.js","components/Card/Card.js","BoardGenerator.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["randomInt","min","max","inclusive","arguments","length","undefined","Math","floor","random","module","exports","randomSpan","start","stop","step","Array","ceil","fill","map","x","y","fillRandom","size","_","shuffle","array","isArray","Error","t","i","m","Card","props","react_default","a","createElement","className","style","backgroundImage","image","concat","onClick","require","berries","points","BoardGenerator","Object","classCallCheck","this","createClass","key","value","board","forEach","berry","name","image_src","subdir","dirname","push","Board","_Component","_this","possibleConstructorReturn","getPrototypeOf","call","generator","state","score","cards","makeBoard","inherits","index","current","visited","alert","setState","list","console","log","filter","c","card","_this2","Card_Card","_this3","ROWS","status","renderSquare","Component","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8EAAA,IAAMA,EAAY,SAACC,EAAKC,GAAN,IAAWC,IAAXC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,UAAgCG,KAAKC,MAAMD,KAAKE,UAAYP,EAAMD,EAAM,GAAKE,EAAY,EAAI,KAAOF,GAmBtHS,EAAOC,QAAU,CACbX,YACAY,WAnBe,SAACC,EAAOC,GAAR,IAAcC,EAAdX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAqB,EAArB,OAA2BY,MAAMT,KAAKU,MAAM,EAAIH,EAAOD,GAASE,IAAOG,KAAKL,GAAOM,IAAI,SAACC,EAAGC,GAAJ,OAAUrB,EAAUa,EAAOC,EAAOD,GAASE,KAoBjJO,WAlBe,SAACrB,EAAKC,GAAN,IAAWqB,EAAXnB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAkBF,EAAMD,EAAM,EAA9B,OAAoCe,MAAMO,GAAML,KAAKjB,GAAKkB,IAAI,SAAAK,GAAC,OAAIxB,EAAUC,EAAKC,EAAMD,MAmBvGwB,QAjBY,SAACC,GACb,IAAKV,MAAMW,QAAQD,GAAQ,MAAME,MAAM,iBAGvC,IAFA,IACIC,EAAGC,EADHC,EAAIL,EAAMrB,OAEP0B,GACHD,EAAIvB,KAAKC,MAAMD,KAAKE,SAAWsB,KAC/BF,EAAIH,EAAMK,GACVL,EAAMK,GAAKL,EAAMI,GACjBJ,EAAMI,GAAKD,EAEf,OAAOH,83BCAIM,MAbf,SAAcC,GAEV,OACIC,EAAAC,EAAAC,cAAA,UACAC,UAAU,OACVC,MAAO,CACHC,gBAAiBN,EAAMO,MAAN,OAAAC,OAAqBR,EAAMO,MAA3B,KAAsC,QAE3DE,QAAST,EAAMS,WCVnB9B,EACA+B,EAAQ,GADR/B,WAMEgC,EAAUD,EAAQ,IAGlBE,EAASjC,EAAW,EAAG,GAIhBkC,EAAb,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAA,OAAAC,OAAAG,EAAA,EAAAH,CAAAD,EAAA,EAAAK,IAAA,YAAAC,MAAA,WAGQ,IAAIC,EAAQ,GAuBZ,OApBAT,EAAQU,QAAQ,SAAAC,GAAS,IAIjBC,EAGAD,EAHAC,KACAhB,EAEAe,EAFAf,MAIAiB,EAAYC,QAFZH,EADAI,QAGqC,IAAMnB,EAE/Ca,EAAMO,KAAK,CACPJ,OACAhB,MAAOiB,EACPZ,OAAQA,EAhBJ,OAsBLQ,MA1BfP,EAAA,GCXOrB,EAAWkB,EAAQ,GAAnBlB,QAIMoC,EAAb,SAAAC,GAEI,SAAAD,EAAY5B,GAAO,IAAA8B,EAAAhB,OAAAC,EAAA,EAAAD,CAAAE,KAAAY,GACfE,EAAAhB,OAAAiB,EAAA,EAAAjB,CAAAE,KAAAF,OAAAkB,EAAA,EAAAlB,CAAAc,GAAAK,KAAAjB,KAAMhB,IACN,IAAIkC,EAAYlC,EAAMkC,WAAa,IAAIrB,EAFxB,OAGfiB,EAAKK,MAAQ,CACTD,YACAE,MAAO,EACPC,MAAOH,EAAUI,aANNR,EAFvB,OAAAhB,OAAAyB,EAAA,EAAAzB,CAAAc,EAAAC,GAAAf,OAAAG,EAAA,EAAAH,CAAAc,EAAA,EAAAV,IAAA,UAAAC,MAAA,SAYYqB,GAIJ,IAAIC,EAAUzB,KAAKmB,MAAME,MAAMG,GAC1B5B,EAAiB6B,EAAjB7B,OAAiB6B,EAATlC,MAGVkC,EAAQC,UAEPC,MAAM,aACN3B,KAAK4B,SAAS,CAACR,MAAQ,KAG3BK,EAAQC,SAAU,EAElB1B,KAAK4B,SAAS,SAAAT,GAEV,IAAMU,EAAOV,EAAME,MAEnB,OADAQ,EAAKL,GAASC,EACP,CAACI,UAGZ7B,KAAK4B,SAAS,CACVR,MAAOpB,KAAKmB,MAAMC,MAAQxB,EAC1ByB,MAAO7C,EAAQwB,KAAKmB,MAAME,SAG9BS,QAAQC,IAAI,kBAAmB/B,KAAKmB,MAAME,OAC1CS,QAAQC,IAAI,kBAAmB/B,KAAKmB,MAAME,MAAMW,OAAO,SAAAC,GAAC,OAAEA,EAAEP,UAAStE,UAzC7E,CAAA8C,IAAA,eAAAC,MAAA,SA4CiBqB,EAAOU,GAAM,IAAAC,EAAAnC,KAClBT,EAAQ2C,EAAK3C,MACjB,OAAON,EAAAC,EAAAC,cAACiD,EAAD,CACH7C,MAAOA,EACPY,MAAOqB,EACPtB,IAAKsB,EACL/B,QAAS,kBAAI0C,EAAK1C,QAAQ+B,QAlDtC,CAAAtB,IAAA,SAAAC,MAAA,WAsDa,IAAAkC,EAAArC,KACCsC,EAAOhF,KAAKC,MAAMyC,KAAKmB,MAAME,MAAMjE,OAzD7B,GAyDqD,EACjE0E,QAAQC,IAAI,qBAAsBO,GAClC,IAAMC,EAAM,kBAAA/C,OAAqBQ,KAAKmB,MAAMC,OAE5C,OACAnC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUmD,GAExBvC,KAAKmB,MAAME,MAAMnD,IAAI,SAACgE,EAAMV,GACzB,OAAQA,EAAQc,EAAO,EACnBrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACViD,EAAKG,aAAahB,EAAOU,IAE5BG,EAAKG,aAAahB,EAAOU,UApE/CtB,EAAA,CAA2B6B,aCUZC,mLATX,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACwD,EAAD,KAAS,IAAI9C,WALH4C,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39a5faa6.chunk.js","sourcesContent":["const randomInt = (min, max, inclusive = true) => Math.floor(Math.random() * (max - min + 1 + (inclusive ? 1 : 0))) + min;\r\n\r\nconst randomSpan = (start, stop, step = 1) => Array(Math.ceil((1 + stop - start) / step)).fill(start).map((x, y) => randomInt(start, stop - start) * step);\r\n\r\nconst fillRandom = (min, max, size = max - min + 1) => Array(size).fill(min).map(_ => randomInt(min, max - min));\r\n\r\nconst shuffle = (array) => {\r\n    if (!Array.isArray(array)) throw Error('not an array!');\r\n    let m = array.length,\r\n        t, i;\r\n    while (m) {\r\n        i = Math.floor(Math.random() * m--);\r\n        t = array[m];\r\n        array[m] = array[i];\r\n        array[i] = t;\r\n    }\r\n    return array;\r\n}\r\n\r\nmodule.exports = {\r\n    randomInt,\r\n    randomSpan,\r\n    fillRandom,\r\n    shuffle\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    \r\n    return (\r\n        <button\r\n        className=\"card\"\r\n        style={{\r\n            backgroundImage: props.image ? `url(${props.image})` : \"none\"\r\n        }}\r\n        onClick={props.onClick}>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","const {\r\n    randomSpan\r\n} = require('../src/components/utils.js')\r\nconst placeholder = '/img/blackberries/container-of-blackberries.jpg'\r\nconst subdir = '/img';\r\n// const placeholder = \"https://via.placeholder.com/500/5c2197/7e57e2?Text=Digital.com\"\r\n// console.log('placeholder', placeholder)\r\nconst berries = require('./data/berries.json');\r\n// console.log('berry data:', berries);\r\n\r\nconst points = randomSpan(1, 9);\r\n// const ROWS = 3;\r\n// const COLS = 3;\r\n\r\nexport class BoardGenerator {\r\n\r\n    makeBoard() {\r\n        let board = [];\r\n        let count = 0;\r\n\r\n        berries.forEach(berry => {\r\n            // console.log('berry: ', element)\r\n\r\n            let {\r\n                name,\r\n                image,\r\n                dirname\r\n            } = berry;\r\n\r\n            let image_src = subdir + '/' + dirname + '/' + image;\r\n            \r\n            board.push({\r\n                name,\r\n                image: image_src,\r\n                points: points[count],\r\n                // row: i,\r\n                // col: j\r\n            });\r\n        });\r\n\r\n        return board;\r\n    }\r\n\r\n    // makeBoard() {\r\n    //     let arr = [];\r\n    //     let count = 0;\r\n    //     for (var i = 0; i < ROWS; i++) {\r\n    //         for (var j = 0; j < COLS; j++) {\r\n    //             arr.push({ \r\n    //                 image: placeholder, \r\n    //                 points: points[count],\r\n    //                 row: i,\r\n    //                 col: j\r\n    //             });\r\n    //             count++\r\n    //         }\r\n    //     }\r\n    //     return arr;\r\n    // }\r\n\r\n}","import React, { Component } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { BoardGenerator } from '../../BoardGenerator';\r\nconst {shuffle} = require('../utils.js');\r\n\r\nconst MAX_COLUMNS = 3;\r\n\r\nexport class Board extends Component {\r\n\r\n    constructor(props) {        \r\n        super(props);\r\n        let generator = props.generator || new BoardGenerator();\r\n        this.state = {\r\n            generator,\r\n            score: 0,\r\n            cards: generator.makeBoard()\r\n        };\r\n    }\r\n\r\n    onClick(index) {        \r\n        // console.info('index: ', index);\r\n        // console.info('image: ', this.state.cards[index].image)\r\n        // console.info('points: ', this.state.cards[index].points)\r\n        let current = this.state.cards[index];\r\n        let {points, image} = current;       \r\n        // console.log('current card: ', current);\r\n\r\n        if(current.visited)\r\n        {\r\n            alert('GAME OVER');\r\n            this.setState({score : 0})\r\n        }\r\n\r\n        current.visited = true;\r\n        \r\n        this.setState(state=>\r\n        {\r\n            const list = state.cards;                       \r\n            list[index] = current;            \r\n            return {list}\r\n        });\r\n            \r\n        this.setState({\r\n            score: this.state.score + points,\r\n            cards: shuffle(this.state.cards)\r\n        })\r\n            \r\n        console.log('updated state: ', this.state.cards);        \r\n        console.log('total visited: ', this.state.cards.filter(c=>c.visited).length)\r\n    }\r\n\r\n    renderSquare(index, card) {\r\n        let image = card.image;\r\n        return <Card \r\n            image={image} \r\n            value={index} \r\n            key={index} \r\n            onClick={()=>this.onClick(index)}>\r\n        </Card>;\r\n    }\r\n\r\n    render() {\r\n        const ROWS = Math.floor(this.state.cards.length / MAX_COLUMNS) + 1; //todo: figure out a smart way to get the number of rows w/o going over, i.e. 8 means 3 rows just like 9.\r\n        console.log('max rows allowed: ', ROWS);\r\n        const status = `Current score: ${this.state.score}`;\r\n        // console.log('cards: ', this.state.cards);\r\n        return (\r\n        <div>\r\n            <div className=\"status\">{status}</div>\r\n\r\n            {this.state.cards.map((card, index) => {\r\n                return (index % ROWS < 0) ?\r\n                    <div className=\"board-row\">\r\n                        {this.renderSquare(index, card)}\r\n                    </div>\r\n                    : this.renderSquare(index, card);\r\n            })}\r\n        </div>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Board } from './components/Board/Board';\r\nimport { BoardGenerator } from './BoardGenerator';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Click the Berries!</h1>\r\n        <Board >{new BoardGenerator()}</Board>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}