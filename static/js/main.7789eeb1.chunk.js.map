{"version":3,"sources":["components/utils.js","images/index.js","images/blueberries/blueberry.jpg","images/blackberries/container-of-blackberries.jpg","images/gooseberries/gooseberries.jpg","images/cloudberries/cloudberries.jpg","images/acaiberries/Acai-Berries.jpg","images/salmonberries/salmonberries.jpg","images/red_mulberries/red_mulberries.jpg","images/boysenberries/organic-boysenberry.jpg","images/raspberries/raspberries_closeup.jpg","components/Card/Card.js","BoardGenerator.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["randomInt","min","max","inclusive","arguments","length","undefined","Math","floor","random","module","exports","randomSpan","start","stop","step","Array","ceil","fill","map","x","y","fillRandom","size","_","shuffle","array","isArray","Error","t","i","m","blueberry","require","blackberry","gooseberry","cloudberry","acaiberry","salmonberry","red_mulberry","boysenberry","raspberry","__webpack_require__","p","Card","props","react_default","a","createElement","className","style","backgroundImage","image","concat","onClick","berries","Object","entries","points","BoardGenerator","classCallCheck","this","createClass","key","value","board","count","forEach","berry","name","push","Board","_Component","_this","possibleConstructorReturn","getPrototypeOf","call","generator","state","score","topScore","cards","makeBoard","inherits","console","log","setState","index","current","visited","newScore","reset","list","filter","c","card","_this2","Card_Card","arrangeTiles","_this3","ROWS","renderSquare","Component","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7789eeb1.chunk.js","sourcesContent":["const randomInt = (min, max, inclusive = true) => Math.floor(Math.random() * (max - min + 1 + (inclusive ? 1 : 0))) + min;\r\n\r\nconst randomSpan = (start, stop, step = 1) => Array(Math.ceil((1 + stop - start) / step)).fill(start).map((x, y) => randomInt(start, stop - start) * step);\r\n\r\nconst fillRandom = (min, max, size = max - min + 1) => Array(size).fill(min).map(_ => randomInt(min, max - min));\r\n\r\nconst shuffle = (array) => {\r\n    if (!Array.isArray(array)) throw Error('not an array!');\r\n    let m = array.length,\r\n        t, i;\r\n    while (m) {\r\n        i = Math.floor(Math.random() * m--);\r\n        t = array[m];\r\n        array[m] = array[i];\r\n        array[i] = t;\r\n    }\r\n    return array;\r\n}\r\n\r\nmodule.exports = {\r\n    randomInt,\r\n    randomSpan,\r\n    fillRandom,\r\n    shuffle\r\n}","//todo: maybe try: https://medium.com/@WebReflection/javascript-dynamic-import-export-b0e8775a59d4 (top of page)\r\n\r\nexports.blueberry = require('./blueberries/blueberry.jpg')\r\nexports.blackberry = require('./blackberries/container-of-blackberries.jpg')\r\nexports.gooseberry = require('./gooseberries/gooseberries.jpg');\r\nexports.cloudberry = require('./cloudberries/cloudberries.jpg');\r\nexports.acaiberry = require('./acaiberries/Acai-Berries.jpg')\r\nexports.salmonberry = require('./salmonberries/salmonberries.jpg');\r\nexports.red_mulberry = require('./red_mulberries/red_mulberries.jpg');\r\nexports.boysenberry = require('./boysenberries/organic-boysenberry.jpg');\r\nexports.raspberry = require('./raspberries/raspberries_closeup.jpg');","module.exports = __webpack_public_path__ + \"static/media/blueberry.40904b07.jpg\";","module.exports = __webpack_public_path__ + \"static/media/container-of-blackberries.ab56d77b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/gooseberries.c52f889d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cloudberries.2789986d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Acai-Berries.d76e44e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/salmonberries.7c7880b0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/red_mulberries.28d5666f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/organic-boysenberry.a1605fea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/raspberries_closeup.55ad5ac9.jpg\";","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    \r\n    return (\r\n        <button\r\n        className=\"card\"\r\n        style={{\r\n            backgroundImage: props.image ? `url(${props.image})` : \"none\"\r\n        }}\r\n        onClick={props.onClick}>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","const berries = Object.entries(require('./images'));\r\n\r\nconst {\r\n    randomSpan\r\n} = require('../src/components/utils.js');\r\n// const placeholder = \"https://via.placeholder.com/500/5c2197/7e57e2?Text=Digital.com\"\r\n\r\nconst points = randomSpan(1, 9);\r\n\r\nexport class BoardGenerator {\r\n\r\n    makeBoard() {\r\n        let board = [];\r\n        let count = 0;\r\n\r\n        berries.forEach(berry => {\r\n            let {\r\n                1: image,\r\n                0: name\r\n            } = berry;\r\n\r\n            board.push({\r\n                name,\r\n                image,\r\n                points: points[count],\r\n            });\r\n\r\n            count++;\r\n        });\r\n\r\n        return board;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { BoardGenerator } from '../../BoardGenerator';\r\nimport './style.css';\r\n\r\nconst { shuffle } = require('../utils.js');\r\nconst MAX_COLUMNS = 3;\r\n\r\nexport class Board extends Component {\r\n\r\n    constructor(props) {        \r\n        super(props);                \r\n        this.generator = props.generator || new BoardGenerator();        \r\n        this.state = {\r\n            score: 0,\r\n            topScore: 0,\r\n            cards: this.generator.makeBoard()\r\n        };\r\n\r\n        shuffle(this.state.cards);\r\n    }\r\n\r\n    reset() {\r\n        console.log('resetting game!');\r\n        this.setState({score:0, cards: this.generator.makeBoard()})\r\n        shuffle(this.state.cards);\r\n    }\r\n\r\n    onClick(index) {        \r\n        \r\n        let current = this.state.cards[index];\r\n        let {points} = current;       \r\n        \r\n        if(current.visited)\r\n        {      \r\n            let newScore = this.state.score;\r\n            if(newScore > this.state.topScore || 0)\r\n                this.setState({topScore: newScore});\r\n            this.setState({score: 0});\r\n            this.reset();\r\n            return;\r\n        }\r\n\r\n        current.visited = true;\r\n        \r\n        this.setState(state=>\r\n        {\r\n            const list = state.cards;\r\n            state.score = state.score + points;\r\n            return {list}\r\n        });\r\n        \r\n        shuffle(this.state.cards);\r\n        \r\n        let visited = this.state.cards.filter(c=>c.visited).length;\r\n        console.log('total visited: ', visited)\r\n    }\r\n\r\n    renderSquare(index, card) {\r\n        let image = card.image;\r\n        return <Card \r\n            image={image} \r\n            value={index} \r\n            key={index} \r\n            onClick={()=>this.onClick(index)}>\r\n        </Card>;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n        <div>\r\n            <h2 className=\"status\">{`Current Score: ${this.state.score}\\n Top Score: ${this.state.topScore}`}</h2>\r\n            {this.arrangeTiles()}\r\n        </div>);\r\n    }\r\n\r\n    arrangeTiles() {\r\n        const ROWS = Math.floor(this.state.cards.length / MAX_COLUMNS); //todo: figure out a smart way to get the number of rows w/o going over, i.e. 8 means 3 rows just like 9.\r\n        console.log('max rows allowed: ', ROWS);\r\n        return this.state.cards.map((card, index) => {\r\n            return this.renderSquare(index, card);\r\n            // let makeNewRow = index % ROWS + 1;\r\n            // console.info('make new row?', makeNewRow);\r\n            // return (index % ROWS == 0) ?\r\n            //     <div key={index} className=\"board-row\">\r\n            //         {this.renderSquare(index, card)}\r\n            //     </div>\r\n            //     : this.renderSquare(index, card);\r\n        });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Board } from './components/Board/Board';\r\nimport { BoardGenerator } from './BoardGenerator';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Click the Berries!</h1>\r\n        <Board generator={new BoardGenerator()}></Board>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}