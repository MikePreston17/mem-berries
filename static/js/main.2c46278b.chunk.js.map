{"version":3,"sources":["components/Card/Card.js","components/Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","style","backgroundImage","image","concat","onClick","berries","require","console","log","Board","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","cards","makeBoard","inherits","createClass","key","value","arr","i","j","push","row","col","index","_this2","Card_Card","_this3","status","map","card","renderSquare","Component","App","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAgBeA,MAbf,SAAcC,GAEV,OACIC,EAAAC,EAAAC,cAAA,UACAC,UAAU,OACVC,MAAO,CACHC,gBAAiBN,EAAMO,MAAN,OAAAC,OAAqBR,EAAMO,MAA3B,KAAsC,QAE3DE,QAAST,EAAMS,WCRjBC,EAAUC,EAAQ,IACxBC,QAAQC,IAAI,cAAeH,GAC3B,IAKaI,EAAb,SAAAC,GAEI,SAAAD,EAAYd,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMnB,KACDuB,MAAQ,CACTC,MAAO,EACPC,MAAOT,EAAKU,aAJDV,EAFvB,OAAAC,OAAAU,EAAA,EAAAV,CAAAH,EAAAC,GAAAE,OAAAW,EAAA,EAAAX,CAAAH,EAAA,EAAAe,IAAA,YAAAC,MAAA,WAYQ,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAfX,EAeqBA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAff,EAeyBA,IACtBF,EAAIG,KAAK,CACL3B,MApBA,oDAqBA4B,IAAKH,EACLI,IAAKH,IAIjB,OAAOF,IArBf,CAAAF,IAAA,UAAAC,MAAA,WAyBQlB,QAAQC,IAAI,aAzBpB,CAAAgB,IAAA,eAAAC,MAAA,SA4BiBO,EAAO9B,GAAO,IAAA+B,EAAAnB,KACvB,OAAOlB,EAAAC,EAAAC,cAACoC,EAAD,CAAMhC,MAAOA,EAAOuB,MAAOO,EAAOR,IAAKQ,EAAO5B,QAAS,kBAAM6B,EAAK7B,eA7BjF,CAAAoB,IAAA,SAAAC,MAAA,WAiCa,IAAAU,EAAArB,KACCsB,EAAM,kBAAAjC,OAAqBW,KAAKK,OAGtC,OAAQvB,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUqC,GAExBtB,KAAKI,MAAME,MAAMiB,IAAI,SAACC,EAAMN,GACzB,OAAQA,EAAQ,EAAI,EAChBpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVoC,EAAKI,aAAaP,EAAOM,EAAKpC,QAEjCiC,EAAKI,aAAaP,EAAOM,EAAKpC,cA7CpDO,EAAA,CAA2B+B,aCIZC,mLATX,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAC4C,EAAD,cALUF,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2c46278b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    \r\n    return (\r\n        <button\r\n        className=\"card\"\r\n        style={{\r\n            backgroundImage: props.image ? `url(${props.image})` : \"none\"\r\n        }}\r\n        onClick={props.onClick}>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nconst berries = require('../../data/berries.json');\r\nconsole.log('berry data:', berries);\r\nconst placeholder = '../img/blackberries/container-of-blackberries.jpg'\r\n// const placeholder = \"https://via.placeholder.com/500/5c2197/7e57e2?Text=Digital.com\"\r\nconst ROWS = 3;\r\nconst COLS = 3;\r\n\r\nexport class Board extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            cards: this.makeBoard()\r\n        };\r\n    }\r\n\r\n    makeBoard() {\r\n        let arr = [];\r\n        for (var i = 0; i < ROWS; i++) {\r\n            for (var j = 0; j < COLS; j++) {\r\n                arr.push({ \r\n                    image: placeholder, \r\n                    row: i,\r\n                    col: j \r\n                });\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    onClick() {\r\n        console.log('clicky!');\r\n    }\r\n\r\n    renderSquare(index, image) {\r\n        return <Card image={image} value={index} key={index} onClick={() => this.onClick()}>\r\n        </Card>;\r\n    }\r\n\r\n    render() {\r\n        const status = `Current score: ${this.score}`;\r\n        // console.log('cards: ', this.state.cards);\r\n        // console.log('this', this.renderSquare);\r\n        return (<div>\r\n            <div className=\"status\">{status}</div>\r\n\r\n            {this.state.cards.map((card, index) => {\r\n                return (index % 3 < 0) ?\r\n                    <div className=\"board-row\">\r\n                        {this.renderSquare(index, card.image)}\r\n                    </div>\r\n                    : this.renderSquare(index, card.image);\r\n            })}\r\n        </div>);\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Board } from './components/Board/Board';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Click the Berries!</h1>\r\n        <Board/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}